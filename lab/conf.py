# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import os
SPHINX_TAG = os.environ.get('SPHINX_TAG', 'local')
VERSION = os.environ.get('DOCS_VERSION', 'local')

# -- Project information -----------------------------------------------------

project = 'TAP Supply Chains for Developers'
copyright = '2023, VMware, Inc.'
author = 'VMware Tanzu Learning'

# The short X.Y version
version = VERSION
# The full version, including alpha/beta/rc tags
release = VERSION

tags.add(SPHINX_TAG)

# -- Course-specific (Happy) custom settings ----------------------------------------

# Suppress primary sidebar because students shouldn't be accessing the main ToC
# and accessing lab instructions not for current lab environment
html_sidebars = { "**": [] }
html_theme_options = {
    "use_source_button": False,
}
# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
    'sphinx.ext.ifconfig',
    'sphinx_copybutton',
    'sphinx_design',
    'sphinxcontrib.quizdown'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
if tags.has('educates'):
    master_doc = 'index-educates'
else:
    master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

html_theme = 'sphinx_book_theme'
html_title = project

html_show_sourcelink = False
html_copy_source = False

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
if tags.has('educates'):
    # TODO: Update with latest theme
    html_theme_options = {
        'style_nav_header_background': 'black',
        'prev_next_buttons_location': 'None',
        'includehidden': False
    }
else:
    html_theme_options = {
        "home_page_in_toc": True,
        "logo": {
            # Note: Logos must be in _static, all path elements are ignored
            "image_light": "Tanzu-Academy-logo-Primary.svg",
            "image_dark": "Tanzu-Academy-logo-Reverse.svg",
        },
        "extra_footer": "<div>Version: " + version + "</div>",
    }

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# These paths are either relative to html_static_path
# or fully qualified paths (eg. https://...)
html_css_files = [
    'css/custom.css',
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'LabGuide'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Suppress LaTeX numbering where Sphinx is providing it
    # See https://stackoverflow.com/a/69956454/1773713
    'preamble': r'''\renewcommand{\thechapter}{}
\renewcommand{\thesection}{}
\renewcommand{\thesubsection}{}
\makeatletter
\def\@seccntformat#1{\csname #1ignore\expandafter\endcsname\csname the#1\endcsname\quad}
\let\sectionignore\@gobbletwo
\let\latex@numberline\numberline
\def\numberline#1{\if\relax#1\relax\else\latex@numberline{#1}\fi}
    ''',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
    'tableofcontents': '',
    'extraclassoptions': 'openany,oneside'
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'lab.tex', project,
     'VMware, Inc.', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'instructions', project,
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, project, project,
     author, project, project,
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# Patch HTMLTranslator to open external links in new tabs
# See https://stackoverflow.com/questions/25583581/add-open-in-new-tab-links-in-sphinx-restructuredtext/67153583#67153583
from sphinx.writers.html import HTMLTranslator
from sphinx.writers.html5 import HTML5Translator
from sphinx.util.docutils import is_html5_writer_available
from time import process_time_ns

class PatchedHTMLTranslator(
    HTML5Translator if is_html5_writer_available() else HTMLTranslator
):
    def starttag(self, node, tagname, *args, **attrs):
        if (
            tagname == "a"
            and "target" not in attrs
            and (
                "external" in attrs.get("class", "")
                or "external" in attrs.get("classes", [])
            )
        ):
            attrs["target"] = 'newtab-' + str(process_time_ns())
            attrs["ref"] = "nofollow noopener noreferrer"
        return super().starttag(node, tagname, *args, **attrs)

# Uncomment the following two lines to enable the above patch and
# force external links to be opened in new tabs.
def setup(app):
    app.set_translator("html", PatchedHTMLTranslator)
